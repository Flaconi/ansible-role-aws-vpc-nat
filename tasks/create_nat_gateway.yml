---

- name: ensure nat gw array contains name key
  assert:
    that:
      - natgw.name is defined
      - natgw.name | length > 0
    msg: "aws_vpc_nat_gateways[x].name is not defined, but required"

- name: ensure subnet filter or name is defined
  assert:
    that:
      # subnet_filter OR subnet_name must be defined
      - natgw.subnet_filter is defined or natgw.subnet_name is defined
      # subnet_filter AND subnet_name must not be defined at the same time
      - not (natgw.subnet_filter is defined and natgw.subnet_name is defined)
    msg: "aws_vpc_nat_gateway[x].subnet_filter XOR subnet_name must be defined"

- name: ensure eip filter and name are not both defined
  assert:
    that:
      # eip_filter AND eip_name must not be defined at the same time
      - not (natgw.eip_filter is defined and natgw.eip_name is defined)
    msg: "aws_vpc_nat_gateway[x].eip_filter XOR eip_name must be defined"


###
### gather facts
###

- name: reset values for every loop iteration
  set_fact:
    _aws_subnet_id:
    _aws_subnet_name:
    _aws_eip_id:
    _aws_eip_ip:

# Returns:
# * _aws_subnet_id
# * _aws_subnet_name
- include_tasks: gather_subnet_facts_by_filter.yml
  when:
    - natgw.subnet_filter is defined

# Returns:
# * _aws_subnet_id
# * _aws_subnet_name
- include_tasks: gather_subnet_facts_by_name.yml
  when:
    - natgw.subnet_name is defined


# Returns (if desired):
# * _aws_eip_id
# * _aws_eip_ip
- include_tasks: gather_eip_facts_by_filter.yml
  when:
    - natgw.eip_filter is defined

# Returns (if desired):
# * _aws_eip_id
# * _aws_eip_ip
- include_tasks: gather_eip_facts_by_name.yml
  when:
    - natgw.eip_name is defined


# Idempotence Issue
# -----------------
#
# ec2_vpc_nat_gateway returns a hard-coded ID in chek mode (nat-123456789)
# this results in showing the playbook as 'changed' when doing a dry run.
# To overcome this issue we do the following:
#
# 1. Gather existing NAT GW in that subnet
# 2. If found:
#    2.1. Use its ID for tagging
# 3. If not found:
#    3.1. Create it
#    3.2. Gather facts again to find its id
#    3.3  Use its ID for tagging


###
### Check if subnet already has a Nat GW
###

- name: set nat gateway filters
  set_fact:
    _aws_vpc_nat_gw_filter:
      - key: state
        val: available
      - key: subnet-id
        val: "{{ _aws_subnet_id }}"

- name: find existing nat gateway in subnet
  ec2_vpc_nat_gateway_facts:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_nat_profile | default(omit) }}"
    region: "{{ natgw.region | default(aws_vpc_nat_default_region | default(omit)) }}"
    filters: "{{ _aws_vpc_nat_gw_filter | get_attr('key', 'val') }}"
  register: _aws_vpc_nat_facts


###
### create nat gateway if not exists
###

- name: "create nat gateway for Subnet with ID {{ _aws_subnet_id }}"
  ec2_vpc_nat_gateway:
    # Fixed values
    state: present
    if_exist_do_not_create: True
    wait: True
    wait_timeout: 300
    # Looked-up values
    subnet_id: "{{ _aws_subnet_id }}"
    # Optional values
    allocation_id: "{{ _aws_eip_id | default(omit) }}"
    region: "{{ natgw.region | default(aws_vpc_nat_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_nat_profile | default(omit) }}"
  when:
    - _aws_vpc_nat_facts.result | length == 0

- name: register created nat gateway
  ec2_vpc_nat_gateway_facts:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_nat_profile | default(omit) }}"
    region: "{{ natgw.region | default(aws_vpc_nat_default_region | default(omit)) }}"
    filters: "{{ _aws_vpc_nat_gw_filter | get_attr('key', 'val') }}"
  register: _aws_vpc_nat_facts


###
### Tag nat gateway
###

- name: set natgw tags
  set_fact:
    _aws_vpc_natgw_tags: |
      {{
        natgw.tags | default([]) + [{
          'key': 'Name',
          'val': natgw.name
        }]
      }}

- name: "ensure nat gateway with ID {{ _aws_vpc_nat_facts.result[0].nat_gateway_id }} is tagged"
  ec2_tag:
    # Fixed values
    state: present
    # Looked-up values
    resource: "{{ _aws_vpc_nat_facts.result[0].nat_gateway_id }}"
    # Required values
    tags: "{{ _aws_vpc_natgw_tags | get_attr('key', 'val') }}"
    # Optional values
    region: "{{ natgw.region | default(aws_vpc_nat_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_nat_profile | default(omit) }}"
  when:
    - _aws_vpc_nat_facts.result is defined
    - _aws_vpc_nat_facts.result | length == 1
    - _aws_vpc_nat_facts.result.0 is defined
    - _aws_vpc_nat_facts.result[0].nat_gateway_id is defined
